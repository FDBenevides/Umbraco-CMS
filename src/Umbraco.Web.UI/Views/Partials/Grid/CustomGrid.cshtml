@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq

@* 
    Razor helpers located at the bottom of this file
*@

@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;
    
    foreach (var s in Model.sections) {
        foreach (var row in s.rows) {
            foreach (string extraDivClassOpening in GetExtraDivs(row))
            {
                @Html.Raw("<div class=\"" + @extraDivClassOpening + "\">")
            }
            
            @renderRow(row, false);
            foreach (string extraDivClassClosure in GetExtraDivs(row))
            {
                @Html.Raw("</div>")
            }
        }
    }
}

@helper renderRow(dynamic row, bool singleColumn){
    <div class="row clearfix">
        <div @RenderElementAttributes(row)>
            @foreach (var area in row.areas)
            {
                @*<div class="col-md-@area.grid column">*@
                    <div @RenderElementAttributes(area)>
                        @foreach (string extraDivClassOpening in GetExtraDivs(area))
                        {
                            @Html.Raw("<div class=\"" + @extraDivClassOpening + "\">")
                        }
                        @foreach (var control in area.controls)
                        {
                            if (control != null && control.editor != null && control.editor.view != null)
                            {
                                <text>@Html.Partial("grid/editors/base", (object)control)</text>
                            }
                        }
                        @foreach (string extraDivClassClosure in GetExtraDivs(area))
                        {
                            @Html.Raw("</div>")
                        }
                    </div>
                @*</div>*@
            }
        </div>
    </div>
}

@functions {
    public static IEnumerable<string> GetExtraDivs(dynamic contentItem)
    {
        IEnumerable<string> extraDivs = new string[0];
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
        {
            JProperty extraDivsProp = cfg.Property("divclass");
            if (extraDivsProp != null)
            {
                extraDivs = extraDivsProp.Value.ToString().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            }
        }

        return extraDivs;
    }
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if(cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name.InvariantEquals("divClass"))
                {
                    
                }else
                {
                    var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value.ToString());
                    attrs.Add(property.Name + "=\"" + propertyValue + "\"");
                }
            }

        JObject style = contentItem.styles;

        if (style != null) {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
            {
                var propertyValue = property.Value.ToString();
                if (string.IsNullOrWhiteSpace(propertyValue) == false)
                {
                    cssVals.Add(property.Name + ":" + propertyValue + ";");
                }
            }

            if (cssVals.Any())
                attrs.Add("style=\"" + HttpUtility.HtmlAttributeEncode(string.Join(" ", cssVals)) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
}